@using Azure.AI.OpenAI;

@if (_client is null)
{
    <p>
       OpenAI API Key を入力してください
    </p>

    <input type="text" maxlength="64" @bind="@OpenAIApiKey" />
    <button type="button" @onclick="@Start"><span class="oi oi-chat" aria-hidden="true"></span> はじめる</button>
    }
else
{
    <div id="scrollbox">
        @foreach (Message item in _messages)
        {
            <div class="@item.CSS">
                <div class="user">@item.UserName</div>
                <div class="msg">@item.Body</div>
            </div>
        }

        @if (!_task.IsCompleted)
        {
            <div class="w-100 d-flex justify-content-center align-items-center">
                <div class="spinner-border text-primary spinner-custom" role="status"></div>
            </div>            
        }

        <hr />

        <textarea class="input-lg" placeholder="テキストを入力" @bind="@_message"></textarea>

        <button class="btn btn-default" @onclick="@SendAsync">送信</button>
    </div>
}

@code {
    private string? OpenAIApiKey;

    private OpenAIClient? _client;

    private Task _task = Task.CompletedTask;

    private async Task Start()
    {
        _client = new(OpenAIApiKey);

        await Task.CompletedTask;
        return;
    }

    private async Task SendAsync()
    {
        if (_client is null) return;

        _messages.Add(new("あなた", _message, true));

        ChatCompletionsOptions chatCompletionsOptions = new();
        chatCompletionsOptions.Messages.Add(new(ChatRole.User, _message));

        _message = "";

        Task<Azure.Response<ChatCompletions>> task = _client.GetChatCompletionsAsync("gpt-3.5-turbo-0301", chatCompletionsOptions);
        _task = task;
        Azure.Response<ChatCompletions> result = await task;

        _responses.Add(result);

        _messages.Add(new("AI", result.Value.Choices[0].Message.Content, false));
    }

    // on-screen message
    private string _message = "";

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private List<Azure.Response<ChatCompletions>> _responses = new();

    private class Message
    {
        public Message(string userName, string body, bool mine)
        {
            UserName = userName;
            Body = body;
            Mine = mine;
        }

        public string UserName { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public string CSS => Mine ? "sent" : "received";
    }
}
